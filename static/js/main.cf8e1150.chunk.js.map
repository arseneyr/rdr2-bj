{"version":3,"sources":["bj.worker.js","blackjack_rules.ts","EntryPad.tsx","CardEntry.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","Worker","__webpack_require__","p","Card","add_card","hand_value","card","ret","Object","objectSpread","value","soft","Ace","all_valid","fromEntries","values","filter","c","map","get_unbusting_cards","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","err","return","get_valid_cards","cards","deck","Map","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","set","get","Array","from","entries","_ref","_ref2","slicedToArray","v","Ten","array","chunk_size","grouped_cards","x","sort","a","b","slice","Math","ceil","length","fill","_","index","begin","borderStyle","useStyles","makeStyles","root","display","flexDirection","borderRight","borderBottom","row","flex","button","borderTop","borderLeft","transition","icon","fontSize","disabledButton","color","EntryPad","onCardClick","onBackspaceClick","onSubmitClick","props","objectWithoutProperties","classes","react_default","createElement","className","i","key","ButtonBase","disabled","cardsEnabled","onClick","useCallback","Typography","variant","style","borderSpacing","backspaceEnabled","BackspaceTwoTone","submitEnabled","CheckCircleTwoTone","entryTable","& td:first-child","paddingRight","verticalAlign","& td:last-child","paddingLeft","& td","padding","@keyframes blink","backgroundColor","to","50%","cursor","animation","card_arry_to_string","join","EntryStage","ActionType","CardEntry","hand","dealer","other","active","height","entryPad","position","displayInner","justifyContent","font","reset","bottom","right","instructions","margin","resultTable","textAlign","& span","& td:last-child > span","whiteSpace","selectedResult","& td:first-child > span","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","progressDiv","width","alignItems","initialState","entry_stage","Start","removed_cards","result","insurance","hit_card","get_current_card_array","state","Hand","Dealer","RemovedCards","Hit","reducer","action","produce","draft","card_array","type","CardButton","push","payload","Backspace","pop","Submit","Working","Reset","Result","hit","get_max","split","ChooseSplit","Done","dealer_bj","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","get_hand_value","ev","max","apply","toConsumableArray","n","isNaN","ev_to_string","num","toFixed","abs","padEnd","App","worker","useRef","_useState","useState","_useState2","progress","setProgress","_useReducer","useReducer","_useReducer2","dispatch","useEffect","current","terminate","onmessage","data","postMessage","dealer_card","submit_disabled","cards_enabled","_len","arguments","valid_maps","_key","reduce","acc","m","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","concat","Fragment","max_result","reset_callback","console","log","align","stand","double","colSpan","CircularProgress","round","Button","Replay","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf8e1150.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"54f75f8de3a77db941fc.worker.js\");\n};","export enum Card {\r\n  Ace = 1,\r\n  Two = 2,\r\n  Three = 3,\r\n  Four = 4,\r\n  Five = 5,\r\n  Six = 6,\r\n  Seven = 7,\r\n  Eight = 8,\r\n  Nine = 9,\r\n  Ten = 10\r\n}\r\n\r\nexport interface HandValue {\r\n  soft: boolean;\r\n  value: number;\r\n}\r\n\r\nexport function add_card(hand_value: HandValue, card: Card) {\r\n  const ret = { ...hand_value };\r\n  ret.value += card;\r\n  if (ret.soft && ret.value > 21) {\r\n    ret.soft = false;\r\n    ret.value -= 10;\r\n  } else if (!ret.soft && card === Card.Ace && ret.value <= 10) {\r\n    ret.soft = true;\r\n    ret.value += 10;\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function get_hand_value(cards: Card[]) {\r\n  let ret = { soft: false, value: 0 };\r\n  for (const card of cards) {\r\n    ret = add_card(ret, card);\r\n  }\r\n  return ret;\r\n}\r\n\r\ninterface ValidMap {\r\n  [index: number]: boolean;\r\n}\r\n\r\nconst all_valid = Object.fromEntries(\r\n  Object.values(Card)\r\n    .filter(c => typeof c === \"number\")\r\n    .map(c => [c, true])\r\n);\r\n\r\nexport function get_unbusting_cards(hand_value: HandValue) {\r\n  const ret: ValidMap = {};\r\n  for (const card of Object.values(Card).filter(\r\n    c => typeof c === \"number\"\r\n  ) as Card[]) {\r\n    if (add_card(hand_value, card).value <= 21) {\r\n      ret[card] = true;\r\n    }\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function get_valid_cards(cards: Card[]) {\r\n  const deck: Map<number, number> = new Map(\r\n    Object.values(Card)\r\n      .filter(c => typeof c === \"number\")\r\n      .map(c => [c, 0])\r\n  );\r\n  for (const card of cards) {\r\n    deck.set(card, deck.get(card)! + 1);\r\n  }\r\n  return Object.fromEntries(\r\n    Array.from(deck.entries()).map(([c, v]) => [\r\n      c,\r\n      c === Card.Ten ? v < 16 : v < 4\r\n    ])\r\n  );\r\n}\r\n\r\nexport function merge_valid_maps(...valid_maps: ValidMap[]) {\r\n  return valid_maps.reduce(\r\n    (acc, m) => {\r\n      for (const card of Object.values(Card).filter(\r\n        c => typeof c === \"number\"\r\n      )) {\r\n        if (!m[card]) {\r\n          acc[card] = false;\r\n        }\r\n      }\r\n      return acc;\r\n    },\r\n    { ...all_valid }\r\n  );\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { makeStyles, ButtonBase, Typography } from \"@material-ui/core\";\r\nimport { Card } from \"./blackjack_rules\";\r\nimport { BackspaceTwoTone, CheckCircleTwoTone } from \"@material-ui/icons\";\r\n\r\nconst array_chunks = (array: any[], chunk_size: number) =>\r\n  Array(Math.ceil(array.length / chunk_size))\r\n    .fill(0)\r\n    .map((_, index) => index * chunk_size)\r\n    .map(begin => array.slice(begin, begin + chunk_size));\r\nconst grouped_cards = array_chunks(\r\n  Object.values(Card)\r\n    .filter(x => typeof x === \"number\")\r\n    .sort((a, b) => a - b)\r\n    .slice(1),\r\n  3\r\n);\r\n\r\nconst borderStyle = \"4px solid rgba(255,171,0, 0.2)\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    borderRight: borderStyle,\r\n    borderBottom: borderStyle\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    flex: \"1 0 0\"\r\n  },\r\n  button: {\r\n    flex: \"1 0 0\",\r\n    borderTop: borderStyle,\r\n    borderLeft: borderStyle,\r\n    transition: \"color .1s\"\r\n  },\r\n  icon: {\r\n    fontSize: \"4rem\"\r\n  },\r\n  disabledButton: {\r\n    color: \"rgba(255,171,0, 0.2)\"\r\n  }\r\n});\r\n\r\ninterface Props {\r\n  onCardClick: (card: Card) => void;\r\n  cardsEnabled: { [index: number]: boolean };\r\n  onBackspaceClick: () => void;\r\n  backspaceEnabled: boolean;\r\n  onSubmitClick: () => void;\r\n  submitEnabled: boolean;\r\n  classes: any;\r\n}\r\n\r\nexport default function EntryPad({\r\n  onCardClick,\r\n  onBackspaceClick,\r\n  onSubmitClick,\r\n  ...props\r\n}: Props) {\r\n  const classes = useStyles(props);\r\n  return (\r\n    <div className={classes.root}>\r\n      {grouped_cards.map((row, i) => (\r\n        <div className={classes.row} key={i}>\r\n          {row.map(v => (\r\n            <ButtonBase\r\n              className={classes.button}\r\n              classes={{ disabled: classes.disabledButton }}\r\n              key={v}\r\n              disabled={!props.cardsEnabled[v]}\r\n              // eslint-disable-next-line react-hooks/rules-of-hooks, react-hooks/exhaustive-deps\r\n              onClick={useCallback(() => onCardClick(v), [onCardClick])}\r\n            >\r\n              <Typography\r\n                variant=\"h3\"\r\n                style={v === 10 ? { fontSize: \"2rem\" } : undefined}\r\n              >\r\n                {v !== 10 ? (\r\n                  v\r\n                ) : (\r\n                  <table style={{ borderSpacing: \"4px\" }}>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>10</td>\r\n                        <td>J</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Q</td>\r\n                        <td>K</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                )}\r\n              </Typography>\r\n            </ButtonBase>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <div className={classes.row}>\r\n        <ButtonBase\r\n          className={classes.button}\r\n          classes={{ disabled: classes.disabledButton }}\r\n          key=\"delete\"\r\n          onClick={onBackspaceClick}\r\n          disabled={!props.backspaceEnabled}\r\n        >\r\n          <BackspaceTwoTone className={classes.icon} />\r\n        </ButtonBase>\r\n        <ButtonBase\r\n          className={classes.button}\r\n          classes={{ disabled: classes.disabledButton }}\r\n          key={1}\r\n          disabled={!props.cardsEnabled[1]}\r\n          onClick={useCallback(() => onCardClick(1), [onCardClick])}\r\n        >\r\n          <Typography variant=\"h3\">A</Typography>\r\n        </ButtonBase>\r\n        <ButtonBase\r\n          className={classes.button}\r\n          classes={{ disabled: classes.disabledButton }}\r\n          key=\"submit\"\r\n          onClick={onSubmitClick}\r\n          disabled={!props.submitEnabled}\r\n        >\r\n          <CheckCircleTwoTone className={classes.icon} />\r\n        </ButtonBase>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Card } from \"./blackjack_rules\";\r\n\r\nconst useStyles = makeStyles({\r\n  entryTable: {\r\n    \"& td:first-child\": {\r\n      paddingRight: 8,\r\n      verticalAlign: \"top\"\r\n    },\r\n    \"& td:last-child\": {\r\n      paddingLeft: 8\r\n    },\r\n    \"& td\": {\r\n      padding: 0\r\n    },\r\n    borderSpacing: 0\r\n  },\r\n  \"@keyframes blink\": {\r\n    from: { backgroundColor: \"transparent\" },\r\n    to: { backgroundColor: \"transparent\" },\r\n    \"50%\": {\r\n      backgroundColor: \"#ffab00\"\r\n    }\r\n  },\r\n  cursor: {\r\n    animation: \".8s $blink ease infinite\"\r\n  }\r\n});\r\n\r\ninterface Props {\r\n  hand: Card[];\r\n  dealer: Card[];\r\n  other: Card[];\r\n  active?: \"hand\" | \"dealer\" | \"other\";\r\n}\r\n\r\nfunction card_arry_to_string(cards: Card[]) {\r\n  return cards.map(c => (c === 1 ? \"A\" : c)).join(\" \") + \" \";\r\n}\r\n\r\nexport default function({ hand, dealer, other, active }: Props) {\r\n  const classes = useStyles();\r\n  const cursor = <span className={classes.cursor}>&nbsp;</span>;\r\n  return (\r\n    <table className={classes.entryTable}>\r\n      <tbody>\r\n        <tr>\r\n          <td>Hand</td>\r\n          <td>\r\n            {card_arry_to_string(hand)}\r\n            {active === \"hand\" && cursor}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>Dealer</td>\r\n          <td>\r\n            {card_arry_to_string(dealer)}\r\n            {active === \"dealer\" && cursor}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>Other</td>\r\n          <td>\r\n            {card_arry_to_string(other)}\r\n            {active === \"other\" && cursor}\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React, {\r\n  useEffect,\r\n  useState,\r\n  useRef,\r\n  useReducer,\r\n  useCallback\r\n} from \"react\";\r\nimport {\r\n  CircularProgress,\r\n  Typography,\r\n  Button,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport { Replay } from \"@material-ui/icons\";\r\nimport { produce } from \"immer\";\r\n\r\nimport Worker from \"./bj.worker.js\";\r\nimport {\r\n  Card,\r\n  HandValue,\r\n  get_hand_value,\r\n  merge_valid_maps,\r\n  get_valid_cards,\r\n  get_unbusting_cards\r\n} from \"./blackjack_rules\";\r\nimport EntryPad from \"./EntryPad\";\r\nimport CardEntry from \"./CardEntry\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100%\",\r\n    color: \"#ffab00\",\r\n    backgroundColor: \"black\"\r\n  },\r\n  entryPad: {\r\n    flex: \"7 0 0\"\r\n  },\r\n  display: {\r\n    flex: \"3 0 0\",\r\n    position: \"relative\"\r\n  },\r\n  displayInner: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    font: `0.8em \"Roboto Mono\"`,\r\n    paddingLeft: 8\r\n  },\r\n  reset: {\r\n    position: \"absolute\",\r\n    bottom: 8,\r\n    right: 8\r\n  },\r\n  instructions: {\r\n    margin: \"8px 0px\"\r\n  },\r\n  resultTable: {\r\n    \"& td:first-child\": {\r\n      textAlign: \"end\"\r\n    },\r\n    \"& td\": {\r\n      padding: 0\r\n    },\r\n    \"& span\": {\r\n      padding: \"0px 5px\"\r\n    },\r\n    \"& td:last-child > span\": {\r\n      whiteSpace: \"pre\"\r\n    },\r\n    borderSpacing: 0,\r\n    paddingLeft: 16\r\n  },\r\n  selectedResult: {\r\n    \"& td:first-child > span\": {\r\n      borderTopLeftRadius: 10,\r\n      borderBottomLeftRadius: 10\r\n    },\r\n    \"& td:last-child > span\": {\r\n      borderTopRightRadius: 10,\r\n      borderBottomRightRadius: 10\r\n    },\r\n    \"& span\": {\r\n      backgroundColor: \"#ffab00\",\r\n      color: \"black\"\r\n    }\r\n  },\r\n  progressDiv: {\r\n    width: 136,\r\n    height: 48,\r\n    paddingLeft: 16,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  }\r\n});\r\n\r\nenum EntryStage {\r\n  Start,\r\n  Hand,\r\n  Dealer,\r\n  RemovedCards,\r\n  Working,\r\n  Done,\r\n  Hit,\r\n  ChooseSplit\r\n}\r\nenum ActionType {\r\n  CardButton,\r\n  Backspace,\r\n  Submit,\r\n  Reset,\r\n  Result\r\n}\r\ninterface BaseAction {\r\n  type: ActionType.Backspace | ActionType.Submit | ActionType.Reset;\r\n}\r\n\r\ninterface CardAction {\r\n  type: ActionType.CardButton;\r\n  payload: Card;\r\n}\r\ninterface ResultAction {\r\n  type: ActionType.Result;\r\n  payload: ExpectedValues;\r\n}\r\n\r\ntype Action = BaseAction | CardAction | ResultAction;\r\n\r\ninterface State {\r\n  entry_stage: EntryStage;\r\n  hand: Card[];\r\n  dealer: Card[];\r\n  removed_cards: Card[];\r\n  hand_value: HandValue;\r\n  insurance: boolean | null;\r\n  result: ExpectedValues | null;\r\n  hit_card: Card[];\r\n}\r\n\r\nconst initialState: State = {\r\n  entry_stage: EntryStage.Start,\r\n  hand: [],\r\n  dealer: [],\r\n  removed_cards: [],\r\n  hand_value: { soft: false, value: 0 },\r\n  result: null,\r\n  insurance: null,\r\n  hit_card: []\r\n};\r\n\r\nfunction get_current_card_array(state: State) {\r\n  return state.entry_stage === EntryStage.Hand ||\r\n    state.entry_stage === EntryStage.Start\r\n    ? state.hand\r\n    : state.entry_stage === EntryStage.Dealer\r\n    ? state.dealer\r\n    : state.entry_stage === EntryStage.RemovedCards\r\n    ? state.removed_cards\r\n    : state.entry_stage === EntryStage.Hit\r\n    ? state.hit_card\r\n    : null;\r\n}\r\n\r\nfunction reducer(state: State, action: Action) {\r\n  return produce(state, draft => {\r\n    let card_array = get_current_card_array(draft);\r\n\r\n    switch (action.type) {\r\n      case ActionType.CardButton: {\r\n        if (card_array) {\r\n          if (\r\n            (card_array !== draft.dealer && card_array !== draft.hit_card) ||\r\n            card_array.length === 0\r\n          ) {\r\n            card_array.push(action.payload);\r\n          }\r\n        }\r\n        if (draft.entry_stage === EntryStage.Start) {\r\n          draft.entry_stage = EntryStage.Hand;\r\n        }\r\n        break;\r\n      }\r\n      case ActionType.Backspace: {\r\n        if (card_array) {\r\n          card_array.pop();\r\n        }\r\n        break;\r\n      }\r\n      case ActionType.Submit: {\r\n        switch (draft.entry_stage) {\r\n          case EntryStage.Hand:\r\n            draft.entry_stage = EntryStage.Dealer;\r\n            break;\r\n          case EntryStage.Dealer:\r\n            draft.entry_stage = EntryStage.RemovedCards;\r\n            break;\r\n          case EntryStage.RemovedCards:\r\n          case EntryStage.Hit:\r\n            draft.entry_stage = EntryStage.Working;\r\n            break;\r\n        }\r\n        break;\r\n      }\r\n      case ActionType.Reset: {\r\n        return initialState;\r\n      }\r\n      case ActionType.Result: {\r\n        draft.result = action.payload;\r\n        if (draft.result.hit && get_max(draft.result) === draft.result.hit) {\r\n          draft.entry_stage = EntryStage.Hit;\r\n        } else if (draft.result.split !== undefined) {\r\n          draft.entry_stage = EntryStage.ChooseSplit;\r\n        } else {\r\n          draft.entry_stage = EntryStage.Done;\r\n        }\r\n        if (\r\n          draft.dealer[0] === Card.Ace &&\r\n          draft.result.dealer_bj !== undefined\r\n        ) {\r\n          if (draft.result.dealer_bj >= 1 / 3) {\r\n            draft.insurance = true;\r\n          } else {\r\n            draft.insurance = false;\r\n          }\r\n        }\r\n        if (draft.hit_card.length > 0) {\r\n          draft.insurance = null;\r\n          draft.hand.push(draft.hit_card[0]);\r\n          draft.hit_card = [];\r\n        }\r\n      }\r\n    }\r\n\r\n    draft.hand_value = get_hand_value(draft.hand);\r\n  });\r\n}\r\n\r\ninterface ExpectedValues {\r\n  stand: number;\r\n  hit?: number;\r\n  split?: number;\r\n  double?: number;\r\n  dealer_bj?: number;\r\n}\r\n\r\nfunction get_max(ev: ExpectedValues) {\r\n  ev = { ...ev };\r\n  delete ev.dealer_bj;\r\n  return Math.max(...Object.values(ev).filter(n => !isNaN(n)));\r\n}\r\n\r\nfunction ev_to_string(value: number) {\r\n  let num = (value * 100).toFixed(2);\r\n  const padding =\r\n    Math.abs(value * 100) < 10 ? \"  \" : Math.abs(value * 100) < 100 ? \" \" : \"\";\r\n  return (padding + (value < 0 ? \"\" : \"+\") + num).padEnd(7, \"0\") + \"%\";\r\n}\r\n\r\ntype WorkerReturn = { data: { ev: ExpectedValues } | { progress: number } };\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const worker = useRef<any>(null);\r\n  const [progress, setProgress] = useState<number | null>(null);\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  useEffect(() => {\r\n    if (state.entry_stage === EntryStage.Start) {\r\n      if (worker.current) {\r\n        worker.current.terminate();\r\n      }\r\n      worker.current = new Worker();\r\n      worker.current.onmessage = ({ data }: WorkerReturn) =>\r\n        \"progress\" in data\r\n          ? setProgress(data.progress)\r\n          : (dispatch({ type: ActionType.Result, payload: data.ev }),\r\n            setProgress(null));\r\n    } else if (state.entry_stage === EntryStage.Working) {\r\n      if (state.hit_card.length > 0) {\r\n        worker.current.postMessage({\r\n          hit_card: state.hit_card[0]\r\n        });\r\n      } else {\r\n        worker.current.postMessage({\r\n          removed_cards: state.removed_cards,\r\n          hand: state.hand,\r\n          dealer_card: state.dealer[0]\r\n        });\r\n      }\r\n    }\r\n  }, [state]);\r\n  const card_array = get_current_card_array(state);\r\n  const submit_disabled =\r\n    state.entry_stage === EntryStage.Hand\r\n      ? state.hand.length < 2\r\n      : state.entry_stage === EntryStage.Dealer\r\n      ? state.dealer.length < 1\r\n      : state.entry_stage === EntryStage.RemovedCards\r\n      ? false\r\n      : state.entry_stage === EntryStage.Hit\r\n      ? state.hit_card.length < 1\r\n      : true;\r\n  const cards_enabled = merge_valid_maps(\r\n    ...[\r\n      get_valid_cards(state.hand.concat(state.dealer, state.removed_cards)),\r\n      ...(state.entry_stage === EntryStage.Hand && state.hand.length >= 2\r\n        ? [{}]\r\n        : []),\r\n      ...(state.entry_stage === EntryStage.Dealer && state.dealer.length > 0\r\n        ? [{}]\r\n        : []),\r\n      ...(state.entry_stage === EntryStage.Hit\r\n        ? state.hit_card.length > 0\r\n          ? [{}]\r\n          : [get_unbusting_cards(state.hand_value)]\r\n        : []),\r\n      ...(state.entry_stage === EntryStage.Done ? [{}] : [])\r\n    ]\r\n  );\r\n  const instructions =\r\n    state.entry_stage === EntryStage.Hand ||\r\n    state.entry_stage === EntryStage.Start ? (\r\n      \"Enter your initial hand\"\r\n    ) : state.entry_stage === EntryStage.Dealer ? (\r\n      \"Enter dealer's card\"\r\n    ) : state.entry_stage === EntryStage.RemovedCards ? (\r\n      \"Enter any other visible cards\"\r\n    ) : state.entry_stage === EntryStage.Working ? (\r\n      \"Computing...\"\r\n    ) : state.entry_stage === EntryStage.Hit ? (\r\n      \"Enter hit card\"\r\n    ) : (\r\n      <>&nbsp;</>\r\n    );\r\n  const max_result = state.result && get_max(state.result);\r\n  const reset_callback = useCallback(\r\n    () => dispatch({ type: ActionType.Reset }),\r\n    []\r\n  );\r\n  console.log(state.result);\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.display}>\r\n        <Typography\r\n          variant=\"subtitle2\"\r\n          align=\"center\"\r\n          className={classes.instructions}\r\n        >\r\n          {instructions}\r\n        </Typography>\r\n        <div className={classes.displayInner}>\r\n          <CardEntry\r\n            hand={state.hand.concat(state.hit_card)}\r\n            dealer={state.dealer}\r\n            other={state.removed_cards}\r\n            active={\r\n              state.entry_stage === EntryStage.Start ||\r\n              state.entry_stage === EntryStage.Hand ||\r\n              state.entry_stage === EntryStage.Hit\r\n                ? \"hand\"\r\n                : state.entry_stage === EntryStage.Dealer\r\n                ? \"dealer\"\r\n                : state.entry_stage === EntryStage.RemovedCards\r\n                ? \"other\"\r\n                : undefined\r\n            }\r\n          />\r\n          {state.result ? (\r\n            <table className={classes.resultTable}>\r\n              <tbody>\r\n                <tr\r\n                  className={\r\n                    max_result === state.result.stand\r\n                      ? classes.selectedResult\r\n                      : undefined\r\n                  }\r\n                >\r\n                  <td>\r\n                    <span>Stand:</span>\r\n                  </td>\r\n                  <td>\r\n                    <span>{ev_to_string(state.result.stand)}</span>\r\n                  </td>\r\n                </tr>\r\n                {state.result.hit && (\r\n                  <tr\r\n                    className={\r\n                      max_result === state.result.hit\r\n                        ? classes.selectedResult\r\n                        : undefined\r\n                    }\r\n                  >\r\n                    <td>\r\n                      <span>Hit:</span>\r\n                    </td>\r\n                    <td>\r\n                      <span>{ev_to_string(state.result.hit)}</span>\r\n                    </td>\r\n                  </tr>\r\n                )}\r\n                {state.result.double && (\r\n                  <tr\r\n                    className={\r\n                      max_result === state.result.double\r\n                        ? classes.selectedResult\r\n                        : undefined\r\n                    }\r\n                  >\r\n                    <td>\r\n                      <span>Double:</span>\r\n                    </td>\r\n                    <td>\r\n                      <span>{ev_to_string(state.result.double)}</span>\r\n                    </td>\r\n                  </tr>\r\n                )}\r\n                {state.result.split && (\r\n                  <tr\r\n                    className={\r\n                      max_result === state.result.split\r\n                        ? classes.selectedResult\r\n                        : undefined\r\n                    }\r\n                  >\r\n                    <td>\r\n                      <span>Split:</span>\r\n                    </td>\r\n                    <td>\r\n                      <span>{ev_to_string(state.result.split)}</span>\r\n                    </td>\r\n                  </tr>\r\n                )}\r\n                {state.insurance !== null && (\r\n                  <tr>\r\n                    <td colSpan={2} style={{ paddingRight: 5 }}>\r\n                      {`${state.insurance ? \"Take\" : \"Skip\"} insurance`}\r\n                    </td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          ) : progress ? (\r\n            <div className={classes.progressDiv}>\r\n              <CircularProgress\r\n                variant=\"static\"\r\n                color=\"inherit\"\r\n                value={Math.round(progress * 100)}\r\n              />\r\n            </div>\r\n          ) : (\r\n            undefined\r\n          )}\r\n        </div>\r\n        {state.entry_stage !== EntryStage.Hand &&\r\n          state.entry_stage !== EntryStage.Start && (\r\n            <Button\r\n              className={classes.reset}\r\n              color=\"inherit\"\r\n              onClick={reset_callback}\r\n            >\r\n              Reset <Replay style={{ paddingLeft: 8 }} />\r\n            </Button>\r\n          )}\r\n      </div>\r\n      <EntryPad\r\n        onCardClick={useCallback(\r\n          card => dispatch({ type: ActionType.CardButton, payload: card }),\r\n          []\r\n        )}\r\n        cardsEnabled={cards_enabled}\r\n        onBackspaceClick={useCallback(\r\n          () => dispatch({ type: ActionType.Backspace }),\r\n          []\r\n        )}\r\n        backspaceEnabled={card_array !== null && card_array.length > 0}\r\n        onSubmitClick={useCallback(\r\n          () => dispatch({ type: ActionType.Submit }),\r\n          []\r\n        )}\r\n        submitEnabled={!submit_disabled}\r\n        classes={{ root: classes.entryPad }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}